import { InlineKeyboard, InputFile } from "grammy";
import { Other } from "grammy/out/core/api";
import { BotService, MyContext } from "../../core/services/bot/bot.service";
import fs from "fs";
import path from "path";
import { userModel } from "../../core/schemas/user.schema";
import { CheckAccess, Context, Users } from "../../api";
import { IDBChildren, IDBUser } from "@core/schemas/user.interface";

function authHandlerCb(text: string, options: Record<any, any>) {
	return async function (ctx: MyContext) {};
}

export function authHandler() {
	const bot = BotService.getInstance();
	const router = BotService.getRouter();
	bot.callbackQuery("auth", async (ctx: MyContext) => {
		let photoPath = path.join(__dirname, "../../../static/img/auth_guide.png");
		await ctx.editMessageText(
			`üîë –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

		1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ https://login.dnevnik.ru/oauth2?response_type=token&client_id=bb97b3e445a340b9b9cab4b9ea0dbd6f&scope=CommonInfo,ContactInfo,FriendsAndRelatives,EducationalInfo
		
		2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.
		
		3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ –≤—ã—Å–≤–µ—Ç–∏–ª–∞—Å—å —Ç–∞–±–ª–∏—á–∫–∞ "–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω". –ù–∞ <a href="https://imgur.com/a/OyhA8PM">—Ñ–æ—Ç–æ</a> –Ω–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —É—Å–ø–µ—à–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
		
		4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª", –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
		
		5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞. –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞, –í—ã —É–≤–∏–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–¥ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é '–ò–º—è –§.' "
		
		–í–∞–∂–Ω–æ! –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç dnevnik.ru , –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω—ã—Ö —Ü–µ–ª—è—Ö, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –Ω–µ—Å—ë–º –≥–∞—Ä–∞–Ω—Ç–∏–π –∑–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!`,
			{
				reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "start").text("–Ø —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª", "auth_copied").row(),
				parse_mode: "HTML",
			}
		);
	});
	bot.callbackQuery("auth_copied", async (ctx: MyContext) => {
		ctx.session.route = "auth_copied_input";
		//@ts-ignore
		const msg: Message.CommonMessage = await ctx.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É!");
		ctx.session.customData.toRemove = {
			id: msg.message_id,
			chatId: msg.chat.id,
		};
	});
	router.route("auth_copied_input", async (ctx: MyContext) => {
		ctx.session.route = "";
		const urlInputArray = ctx.msg?.text?.match(/access_token\=(.*)&/);
		const accessToken = urlInputArray && urlInputArray[1] ? urlInputArray[1] : "";
		if (ctx.msg) {
			await ctx.deleteMessage();
		}
		if (ctx.session.customData.toRemove) {
			try {
				await ctx.api.deleteMessage(ctx.session.customData.toRemove.chatId, ctx.session.customData.toRemove.id);
			} catch (e) {}
			delete ctx.session.customData.toRemove;
		}
		if (!accessToken || !(accessToken.length == 32)) {
			await ctx.reply("–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!", {
				reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "auth"),
			});
			return;
		}
		const msg = await ctx.reply("‚åõ –û–∂–∏–¥–∞–π—Ç–µ... –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é");
		// await new Promise<void>((resolve, reject) => setTimeout(() => resolve(), 3000)); # For testing URL validation
		const checkAccess = new CheckAccess(accessToken);
		const res = await checkAccess.default();
		if (!(res.response.statusCode == 401)) {
			const usersInstance = new Users(accessToken);
			const contextInstance = new Context(accessToken);
			const userRes = await usersInstance.me();
			const contextRes = await contextInstance.me();
			const user = await userModel.findOne({ userId: userRes.body.id_str }).exec();

			if (!user) {
				await userModel.create<IDBUser>({
					accessToken,
					userId: userRes.body.id_str,
					personId: userRes.body.personId_str,
					name: { shortName: userRes.body.shortName },
					login: userRes.body.login,
					locale: userRes.body.locale,
					timezone: userRes.body.timezone,
					birthday: userRes.body.birthday,
					email: userRes.body.email,
					roles: userRes.body.roles,
					children: contextRes.body.children,
					schools: contextRes.body.schools,
					eduGroups: contextRes.body.eduGroups,
					lastUpdate: Date.now(),
					registerDate: Date.now(),
				});
			} else {
				await userModel.updateOne({
					accessToken,
					userId: userRes.body.id_str,
					personId: userRes.body.personId_str,
					name: { shortName: userRes.body.shortName },
					login: userRes.body.login,
					locale: userRes.body.locale,
					timezone: userRes.body.timezone,
					birthday: userRes.body.birthday,
					email: userRes.body.email,
					roles: userRes.body.roles,
					children: contextRes.body.children,
					schools: contextRes.body.schools,
					eduGroups: contextRes.body.eduGroups,
					lastUpdate: Date.now(),
				});
			}
		}
		await ctx.api.editMessageText(msg.chat.id, msg.message_id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", {
			reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "start"),
		});
	});
}
