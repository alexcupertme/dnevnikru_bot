import { constants } from "../../core/constants";
import { BotService } from "../../core/services/bot/bot.service";
import { Context, Users } from "../../api";
import { InlineKeyboard } from "grammy";
import { Message } from "@grammyjs/types";

export function userCommand() {
	const bot = BotService.getInstance();
	const router = BotService.getRouter();
	const context = new Context(constants.accessToken);
	const users = new Users(constants.accessToken);
	bot.callbackQuery("user", async (ctx) => {
		ctx.session.route = "user_input";
		//@ts-ignore
		const msg: Message.CommonMessage = await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ UserId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º!");
		ctx.session.customData.toRemove = {
			id: msg.message_id,
			chatId: msg.chat.id,
		};
	});
	router.route("user_input", async (ctx) => {
		ctx.session.route = "";
		const userIdInput = parseInt(ctx.msg?.text ?? "", 10);
		if (ctx.msg) {
			await ctx.deleteMessage();
		}
		if (ctx.session.customData.toRemove) {
			try {
				await ctx.api.deleteMessage(ctx.session.customData.toRemove.chatId, ctx.session.customData.toRemove.id);
			} catch (e) {}
			delete ctx.session.customData.toRemove;
		}
		if (isNaN(userIdInput)) {
			await ctx.reply("–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UserId!", {
				reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "menu"),
			});
			return;
		}
		const msg = await ctx.reply("‚åõ –û–∂–∏–¥–∞–π—Ç–µ... –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫");
		const contextRes = await context.user(userIdInput);
		const userRes = await users.user(userIdInput);
		if (contextRes && userRes && !contextRes.response.body?.includes("not found")) {
			let stringBuilder = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n";
			stringBuilder += `üî• –ò–º—è: <code>${userRes.body.shortName}</code>\n\n`;
			stringBuilder += `üî• –õ–æ–≥–∏–Ω: <code>${userRes.body.login ? userRes.body.login : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}</code>\n\n`;
			stringBuilder += `üè´ –®–∫–æ–ª–∞: <code>${contextRes.body.schools ? contextRes.body.schools[0].name : "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}</code>\n\n`;
			stringBuilder += `üñºÔ∏è –ê–≤–∞—Ç–∞—Ä: ${contextRes.body.avatarUrl ? contextRes.body.avatarUrl : "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}\n\n`;
			stringBuilder += `üïµÔ∏è –ê–π–¥–∏ –ø–µ—Ä—Å–æ–Ω—ã: <code>${userRes.body.personId_str}</code>\n\n`;
			stringBuilder += `üë§ –ê–π–¥–∏ —é–∑–µ—Ä–∞: <code>${userRes.body.id_str}</code>\n\n`;
			stringBuilder += `üìú –†–æ–ª–∏: ${userRes.body.roles ? userRes.body.roles.join(", ") : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}\n\n`;
			stringBuilder += `üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${userRes.body.birthday}\n\n`;
			stringBuilder += `üìß Email: <code>${userRes.body.email ? userRes.body.email : "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"}</code>\n\n`;
			await ctx.api.editMessageText(msg.chat.id, msg.message_id, stringBuilder, {
				reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "menu"),
				parse_mode: "HTML",
			});
		} else
			await ctx.api.editMessageText(msg.chat.id, msg.message_id, `–ò–∑–≤–∏–Ω–∏—Ç–µ, —É–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!`, {
				reply_markup: new InlineKeyboard().text("–ù–∞–∑–∞–¥", "menu"),
			});
	});
}
